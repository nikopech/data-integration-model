pattern = "txt",
full.names = TRUE
)
reference_list <- list()
for (i in fls_ref) {
ref <- fread(i)
ref <- ref[order(ref$gene), ]
ref$barcode <- paste0(ref$gene, ":", ref$`amino acid`)
ref$type <- "snp"
ref[which(str_detect(ref$`amino acid`, "del")), ]$type <- "deletion"
reference_list[[i]] <- ref
}
} else {
reference_list <- get_lineage_report(lineages = voc)
}
VoC_hits_list <- list()
for (ref_index in names(reference_list)) {
ref <- reference_list[[ref_index]]
aa_variants <- str_split(ref$`amino acid`, "[0-9]|_|\\/")
codon_num <- str_split(ref$`amino acid`, "[A-Z]|[a-z]|\\_|\\*|\\?|\\/")
aa_variants <- lapply(aa_variants, function(x) {
x <- x[x != ""]
x <- str_replace_all(x, "\\*", "\\\\*")
return(x)
})
codon_num <- lapply(codon_num, function(x) {
return(as.numeric(x[x != ""]))
})
# VoC hits ------------------------------------------------------------
voc_data <- list()
for (i in seq_len(nrow(ref))) {
if (ref[i, ]$type == "snp") {
temp <- vcf_table[which(vcf_table$Gene_Name == ref[i, ]$gene), ]
temp <- temp[which(
str_detect(temp$ref_aa, aa_variants[[i]][1])
), ]
temp <- temp[which(
str_detect(temp$alt_aa, aa_variants[[i]][2])
), ]
who <- which(
temp$codon_num == codon_num[[i]] |
temp$codon_num == codon_num[[i]] + 1 |
temp$codon_num == codon_num[[i]] - 1
)
temp <- temp[who, ]
} else {
temp <- vcf_table[which(vcf_table$Gene_Name == ref[i, ]$gene), ]
temp <- temp[which(str_detect(temp$AA_alt, "del")), ]
who <- which(
temp$codon_start == codon_num[[i]][1] |
temp$codon_start == codon_num[[i]][2]
)
temp <- temp[who, ]
if (nrow(temp) != 0) {
temp$AA_alt <- ref[i, ]$`amino acid`
}
}
voc_data[[ref[i, ]$barcode]] <- temp
}
not_overlapping_variants <- names(which(lapply(voc_data, nrow) == 0))
voc_data <- rbindlist(voc_data)
voc_data <- unique(voc_data)
# collapse table ------------------------------------------------------
voc_data <- voc_data[, c(
"POS",
"DP",
"AD_alt",
"Gene_Name",
"AA_alt",
"sample"
), with = FALSE]
voc_data <- voc_data[, .(
DP = unique(DP),
AD_alt = sum(AD_alt)
), by = .(POS, Gene_Name, AA_alt, sample)]
voc_data <- voc_data[, .(
DP = sum(DP),
AD_alt = sum(AD_alt)
), by = .(Gene_Name, AA_alt, sample)]
voc_data$AF <- voc_data$AD_alt / voc_data$DP
# add non overlapping rules -------------------------------------------
not_overlapping_variants <- str_split(
not_overlapping_variants, "\\:",
simplify = TRUE
)
voc_data <- rbind(
voc_data,
data.table(
Gene_Name = rep(
not_overlapping_variants[, 1],
length(unique(voc_data$sample))
),
AA_alt = rep(
not_overlapping_variants[, 2],
length(unique(voc_data$sample))
),
sample = unique(voc_data$sample),
DP = 0,
AD_alt = 0,
AF = 0
)
)
VoC_hits_list[[ref_index]] <- voc_data
}
for (i in names(VoC_hits_list)) {
strain <- str_split(i, "\\/", simplify = TRUE)
strain <- strain[, ncol(strain)]
strain <- str_remove(strain, "\\.txt")
VoC_hits_list[[i]]$lineage <- strain
}
voc_data <- rbindlist(VoC_hits_list)
return(voc_data)
}
#'
#'
#' uniq_variants
#'
#' @description
#' Lineage report for variants overlapping
#'
#' @param hits_table
#' A tab-delimited table containing the identified overlaps/hits between the i
#' nput files and the lineages' reports
#'
#' @param AF_threshold
#' A parameter indicating the AF threshold that is going to applied in order to
#' identify the presence or not of a variant. This is used to compute the number
#' of variants in a sample and eventually the proportion of a lineage.
#'
#' @return A data table with metrics assessing the
#' abundance of every lineage in each samples
#'
#'
#' @export
#'
#' @examples
#'
#' variants_table <- merge_vcf(
#'     vcf_folder = system.file("extdata", "vcf-files",
#'         package = "lineagespot"
#'     ),
#'     gff3_path = system.file("extdata",
#'         "NC_045512.2_annot.gff3",
#'         package = "lineagespot"
#'     )
#' )
#'
#' lineage_hits_table <- lineagespot_hits(
#'     vcf_table = variants_table,
#'     voc = c("B.1.1.7", "B.1.617.2")
#' )
#'
#' report <- uniq_variants(hits_table = lineage_hits_table)
#' head(report)
uniq_variants <- function(
hits_table = NULL,
AF_threshold = 0.8
) {
if (is.null(hits_table)) {
stop("Please provide a tab-delimited table")
}
# lineage overview -------------------------------------------------------
lineage_stats <- unique(
hits_table[, c("Gene_Name", "AA_alt", "lineage"), with = FALSE]
)
lineage_stats <- lineage_stats[, .N, by = lineage]
count_lineages <- hits_table[which(hits_table$AF >= AF_threshold), ]
count_lineages <- unique(
count_lineages[, c(
"Gene_Name", "AA_alt", "sample", "lineage"
), with = FALSE]
)
count_lineages <- count_lineages[, .N, by = .(lineage, sample)]
# mean AF of all variants ------------------------------------------------
meanAF <- hits_table[, .(meanAF = mean(AF)), by = .(lineage, sample)]
# Find unique variants per lineage ---------------------------------------
count_uniq <- hits_table[, c(
"Gene_Name", "AA_alt", "lineage"
), with = FALSE]
count_uniq <- unique(count_uniq)
count_uniq <- count_uniq[order(count_uniq$Gene_Name, count_uniq$AA_alt), ]
count_uniq <- count_uniq[, .N, by = .(Gene_Name, AA_alt)]
count_uniq <- count_uniq[which(count_uniq$N == 1), ]
hits_table_uniq <- hits_table[which(
hits_table$Gene_Name %in% count_uniq$Gene_Name &
hits_table$AA_alt %in% count_uniq$AA_alt
), ]
# mean AF of unique variants ---------------------------------------------
meanAF_uniq <- hits_table_uniq[, .(
meanAF_uniq = mean(AF)
), by = .(lineage, sample)]
# filter out zero-AF variants --------------------------------------------
hits_table_uniq <- hits_table_uniq[which(hits_table_uniq$AF != 0), ]
# min AF of non zeror unique variants
minAF_uniq <- hits_table_uniq[, .(
minAF_uniq_nonzero = min(AF)
), by = .(lineage, sample)]
# create output table ----------------------------------------------------
overall <- rbindlist(
list(meanAF, meanAF_uniq, minAF_uniq, count_lineages),
use.names <- TRUE,
fill <- TRUE
)
overall <- overall[order(overall$lineage, overall$sample), ]
overall <- overall[, lapply(
.SD, sum,
na.rm = TRUE
), by = .(lineage, sample)]
overall[which(overall$minAF_uniq_nonzero == 0), ]$minAF_uniq_nonzero <- NA
who <- match(overall$lineage, lineage_stats$lineage)
overall$`lineage N. rules` <- lineage_stats[who, ]$N
overall$`lineage prop.` <- overall$N / overall$`lineage N. rules`
return(overall)
}
results <- lineagespot(
vcf_folder = system.file("extdata", "vcf-files",
package = "lineagespot"
),
gff3_path = system.file("extdata",
"NC_045512.2_annot.gff3",
package = "lineagespot"
),
ref_folder = system.file("extdata", "ref",
package = "lineagespot"
)
)
install.packages('VariantAnnotation')
library(VariantAnnotation)
results <- lineagespot(
vcf_folder = system.file("extdata", "vcf-files",
package = "lineagespot"
),
gff3_path = system.file("extdata",
"NC_045512.2_annot.gff3",
package = "lineagespot"
),
ref_folder = system.file("extdata", "ref",
package = "lineagespot"
)
)
install.packages('data.table')
library(data.table)
results <- lineagespot(
vcf_folder = system.file("extdata", "vcf-files",
package = "lineagespot"
),
gff3_path = system.file("extdata",
"NC_045512.2_annot.gff3",
package = "lineagespot"
),
ref_folder = system.file("extdata", "ref",
package = "lineagespot"
)
)
head(results$lineage.report)
check()
check("lineagespot")
check(args = "--no-examples")
getwd()
setwd('/Users/aspaor/Rtest/lineagespot/')
#'
#' lineagespot
#'
#' @description
#' Identify SARS-CoV-2 related mutations based on a single (or a list) of
#' variant(s) file(s)
#'
#' @param vcf_fls
#' A character vector of paths to VCF files
#'
#' @param vcf_folder
#' A path to a folder containing all VCF files
#' that will be integrated into a single table
#'
#' @param gff3_path
#' Path to GFF3 file containing SARS-CoV-2 gene coordinates.
#'
#' @param ref_folder
#' A path to a folder containing lineage reports
#'
#' @param voc
#' A character vector containing the names of the lineages of interest
#'
#' @param AF_threshold
#' A parameter indicating the AF threshold for identifying variants per sample
#'
#' @import data.table
#' @importFrom stringr str_detect str_split str_squish str_remove_all
#' @importFrom stringr str_replace_all str_detect str_to_upper str_remove
#'             str_length
#' @importFrom httr GET content
#' @importFrom VariantAnnotation readVcf info fixed
#' @importFrom SummarizedExperiment assays
#' @importFrom MatrixGenerics rowRanges
#'
#' @return
#' A list of three elements;
#' * Variants' table; A data table containing all variants that are
#' included in the input VCF files
#'
#' * Lineage hits; A data table containing identified hits between the input
#' variants and outbreak.info's lineage reports
#'
#' * Lineage report; A data table with computed metrics about
#' the prevalence of the lineage of interest per sample.
#'
#'
#'
#' @export
#'
#' @examples
#'
#' results <- lineagespot(
#'     vcf_folder = system.file("extdata", "vcf-files",
#'         package = "lineagespot"
#'     ),
#'     gff3_path = system.file("extdata",
#'         "NC_045512.2_annot.gff3",
#'         package = "lineagespot"
#'     ),
#'     ref_folder = system.file("extdata", "ref",
#'         package = "lineagespot"
#'     )
#' )
#'
#' head(results$lineage.report)
#'
lineagespot <- function(vcf_fls = NULL,
vcf_folder = NULL,
gff3_path = NULL,
ref_folder = NULL,
voc = c("B.1.617.2", "B.1.1.7", "B.1.351", "P.1"),
AF_threshold = 0.8
) {
input_check(vcf_fls,vcf_folder,gff3_path,ref_folder)
vcf_table <- merge_vcf(
vcf_fls = vcf_fls,
vcf_folder = vcf_folder,
gff3_path = gff3_path
)
hits_table <- lineagespot_hits(
vcf_table = vcf_table,
ref_folder = ref_folder,
voc = voc
)
lineage_report <- uniq_variants(
hits_table = hits_table,
AF_threshold = AF_threshold
)
out <- list(
"variants.table" = vcf_table,
"lineage.hits" = hits_table,
"lineage.report" = lineage_report
)
return(out)
}
# Removes R CMD check NOTE regarding global variables
utils::globalVariables(
c(
"DP", ".", "AD_alt", "POS", "Gene_Name", "AA_alt",
"start_pos", "end_pos", "gene_name", "lineage",
"AF", ""
)
)
#' isVcf
#'
#' @description
#' Identify VCF files from a group of files.
#'
#' @param file
#' A path to a folder containing all VCF files
#' that will be integrated into a single table (or A character vector of paths
#' to VCF files.)
#'
#' @return
#' A list of two elements;
#' * VCF list; A list where only VCF files are stored.
#'
#' * number of VCF files; A parameter indicating the number of VCF files
#' stored in the VCF list.
#'
#' @export
#'
#' @examples
#'
#' vcf_exists <- isVcf(system.file("extdata", "vcf-files",
#'                                 package = "lineagespot"))
#' print(vcf_exists)
#'
isVcf <- function(file){
if (length(file) ==1) {
vcf_l <- list.files(file)
}
else{
vcf_l <- file
}
vcf_l <- vcf_l[which(str_detect(vcf_l,'.vcf'))]
num_vcf <- length(vcf_l)
return(num_vcf)
}
#' isGff3
#'
#' @description
#' Identify whether a file is in GFF3 format.
#'
#' @param file
#' Path to GFF3 file.
#'
#' @return
#' result; TRUE if the input file is in GFF3 format, FALSE if not.
#'
#' @export
#'
#' @examples
#'
#' gff3_path <- system.file("extdata","NC_045512.2_annot.gff3",
#'                          package = "lineagespot")
#' isGff3(gff3_path)
#'
isGff3 <- function(file){
res <- str_detect(file,'.gff3')
return(res)
}
#' input_check
#'
#' @description
#' Check the validity of input parameters from lineagespot function.
#'
#' @param vcf_fls
#' A character vector of paths to VCF files.
#'
#' @param vcf_folder
#' A path to a folder containing all VCF files
#' that will be integrated into a single table.
#'
#' @param gff3_path
#' Path to GFF3 file containing SARS-CoV-2 gene coordinates.
#'
#' @param ref_folder
#' A path to a folder containing lineage reports
#'
#' @param vcf_exists
#' A parameter indicating the number of VCF files
#' stored in the VCF list.
#'
#' @export
#'
#' @examples
#'
#'
#' input_check(
#'   vcf_folder = system.file("extdata", "vcf-files",
#'                            package = "lineagespot"
#'   ),
#'   gff3_path = system.file("extdata",
#'                           "NC_045512.2_annot.gff3",
#'                           package = "lineagespot"
#'   ),
#'   ref = system.file("extdata", "ref",
#'                     package = "lineagespot"
#'   ))
#'
input_check <- function(
vcf_fls = NULL,
vcf_folder = NULL,
gff3_path= NULL,
ref_folder = NULL,
vcf_exists = 0){
if (length(gff3_path) >1) {
stop("Please give path of only one gff3.")
}
if (is.null(vcf_fls) && is.null(vcf_folder)){
stop('No VCF was given')
}
else if (!is.null(vcf_fls) && !is.null(vcf_folder)){
stop('Please give only one source for VCF.')
}
else if (is.null(vcf_fls) | is.null(vcf_folder)){
if (is.null(vcf_fls)){
files_l <- vcf_folder
}
else{
files_l <- vcf_fls
}
vcf_exists <- isVcf(files_l)
if (vcf_exists == 0){
stop("No VCF is found. Please insert valid input files.")
}
}
if (isGff3(gff3_path) == FALSE){
stop('No valid gff3 was given. Please insert path of valid gff3.')
}
}
results <- lineagespot(
vcf_folder = system.file("extdata", "vcf-files",
package = "lineagespot"
),
gff3_path = system.file("extdata",
"NC_045512.2_annot.gff3",
package = "lineagespot"
),
ref_folder = system.file("extdata", "ref",
package = "lineagespot"
)
)
head(results$lineage.report)
getwd()
setwd('/Users/aspaor/Rtest/lineagespot/')
setwd("~/R_test/InterTADs")
library(devtools)
check()
remove.packages("lineagespot")
